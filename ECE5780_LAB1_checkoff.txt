Checkoff-1



int main(void) {
HAL_Init(); // Reset of all peripherals, init the Flash and Systick
SystemClock_Config(); //Configure the system clock
/* This example uses HAL library calls to control
the GPIOC peripheral. You’ll be redoing this code
with hardware register access. */
//__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
// Set up a configuration struct to pass to the initialization function
//GPIO_InitTypeDef initStr = {GPIO_PIN_8 | GPIO_PIN_9,
//GPIO_MODE_OUTPUT_PP,
//GPIO_SPEED_FREQ_LOW,
//GPIO_NOPULL};
//HAL_GPIO_Init(GPIOC, &initStr); // Initialize pins PC8 & PC9
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Start PC8 high

	
RCC->AHBENR |= (1 << 19);

GPIOC->MODER |= (1 << 12) | (1 << 14);
GPIOC->OTYPER |= (0 << 12) | (0 << 14);
GPIOC->OSPEEDR |= (0 << 12) | (0 << 14);
GPIOC->PUPDR |= (0 << 12) | (0 << 14);
GPIOC->ODR |= (1 << 6);	
	
while (1) {
HAL_Delay(200); // Delay 200ms
// Toggle the output state of both PC8 and PC9
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9);
	
GPIOC->ODR ^= (0 << 6)|(1 << 7);

}

}




checkoff-2



int main(void) {
HAL_Init(); // Reset of all peripherals, init the Flash and Systick
SystemClock_Config(); //Configure the system clock
/* This example uses HAL library calls to control
the GPIOC peripheral. You’ll be redoing this code
with hardware register access. */
//__HAL_RCC_GPIOC_CLK_ENABLE(); // Enable the GPIOC clock in the RCC
// Set up a configuration struct to pass to the initialization function
//GPIO_InitTypeDef initStr = {GPIO_PIN_8 | GPIO_PIN_9,
//GPIO_MODE_OUTPUT_PP,
//GPIO_SPEED_FREQ_LOW,
//GPIO_NOPULL};
//HAL_GPIO_Init(GPIOC, &initStr); // Initialize pins PC8 & PC9
//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // Start PC8 high

	
RCC->AHBENR |= (1 << 19);
RCC->AHBENR |= (1 << 17);

GPIOC->MODER |= (1 << 12) | (1 << 14);
GPIOC->OTYPER |= (0 << 12) | (0 << 14);
GPIOC->OSPEEDR |= (0 << 12) | (0 << 14);
GPIOC->PUPDR |= (0 << 12) | (0 << 14);
GPIOC->ODR |= (1 << 6);	


GPIOA->MODER = 0; //(0 << 1) | (0 << 0);
GPIOA->OSPEEDR = 0; //(0 << 1) | (0 << 0);
GPIOA->PUPDR = 2; //0 << 0) | (1 << 1);

uint32_t debouncer = 0;
	
while (1) {
//HAL_Delay(200); // Delay 200ms
// Toggle the output state of both PC8 and PC9
//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9);
	
//GPIOC->ODR ^= (0 << 6)|(1 << 7);

debouncer = (debouncer << 1); // Always shift every loop iteration
if (GPIOA->IDR & 1) { // If input signal is set/high
debouncer |= 0x01; // Set lowest bit of bit-vector
}
if (debouncer == 0xFFFFFFFF) {
// This code triggers repeatedly when button is steady high!
}
if (debouncer == 0x00000000) {
// This code triggers repeatedly when button is steady low!
}
if (debouncer == 0x7FFFFFFF) {
	GPIOC->ODR ^= (0 << 6)|(1 << 7);
// This code triggers only once when transitioning to steady high!
}
if(GPIOA->IDR & 0) {
HAL_Delay(200); // Delay 200ms
GPIOC->ODR ^= (0 << 6)|(1 << 7);}
// When button is bouncing the bit-vector value is random since bits are set when
//the button is high and not when it bounces low.	

}

}